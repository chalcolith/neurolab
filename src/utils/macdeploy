#!/usr/bin/perl -w

use strict;

my $release_dir = 'debug';
$release_dir = 'release' if grep /--release/, @ARGV;

my $qtlibdir = '/usr/local/Trolltech/Qt-4.6.2/lib';
my $copy_qt = grep /--copyqt/, @ARGV;

opendir my $dh, $release_dir or die "unable to open '$release_dir': $!\n";
my @entries = readdir $dh;
closedir $dh;

my @libraries_done;

for my $entry (@entries)
{
    if ($entry =~ /^(.*)\.app$/)
    {
        @libraries_done = ();
        &process_app("$release_dir/$entry", $1);
    }
}

sub process_app
{
    my ($app_dir, $app_name) = @_;
    print "processing $app_dir\n";

    my $binary = "$app_dir/Contents/MacOS/$app_name";
    &process_libraries($app_dir, $binary);
}

sub process_libraries
{
    my ($app_dir, $binary) = @_;

    # process libraries
    my @libraries = &get_libraries($binary);

    for my $library (@libraries)
    {
        my $relpath;

        # recursively process library
        if ($library =~ /\W(Qt\w+)/)
        {
            my $libname = $1;
            $relpath = &process_qt_library($app_dir, $library, $libname);
        }
        else
        {
            $relpath = &process_bundle($app_dir, $library);
        }

        # now change reference in binary
        if (defined $relpath)
        {
            &run("install_name_tool -change '$library' '\@executable_path/../$relpath' '$binary'");
        }
    }
}

sub process_bundle
{
    my ($app_dir, $library) = @_;

    my $relpath = "Frameworks/$library";
    $relpath =~ s/\@executable_path\/..\/Frameworks\///;
    my $binary = "$app_dir/Contents/$relpath";

    unless (grep {$_ eq $library} @libraries_done)
    {
        print "processing $library\n";

        # call with -id to relativize the library's id
        unless ($library =~ /^\@/)
        {
            &run("install_name_tool -id '\@executable_path/../$relpath' '$binary'");
        }

        push @libraries_done, $library;

        # now process sub-libraries
        &process_libraries($app_dir, $binary);
    }

    return $relpath;
}

sub process_qt_library
{
    my ($app_dir, $qtlib, $libname) = @_;

    my $relpath;
    my $binary;
    if ($qtlib =~ /(Qt\w+\.framework.*)$/)
    {
        $relpath = "Frameworks/$1";
        $relpath =~ s/\@executable_path\/..\/Frameworks\///;

        $binary = "$app_dir/Contents/$relpath";

        print "processing $binary\n";

        unless (grep {$_ eq $qtlib} @libraries_done)
        {
            print "copying Qt library $qtlib\n";

            my $subdir = "$app_dir/Contents/Frameworks/$libname.framework";
            unless ($qtlib =~ /^\@/ || -d $subdir)
            {
                &run("mkdir -p '$app_dir/Contents/Frameworks'");
                &run("cp -R '$qtlibdir/$libname.framework/' '$subdir'");

                &run("install_name_tool -id '\@executable_path/../$relpath' '$binary'");
                &run("strip '$binary'") if $release_dir eq 'release';
            }

            push @libraries_done, $qtlib;

            &process_libraries($app_dir, $binary) if defined $binary;
        }
    }

    return $relpath;
}

sub get_libraries
{
    my ($binary) = @_;
    my @all_libraries = grep /.+/, map { $1 if /^\s+(.*)\s+\(compatibility/ } `otool -L '$binary'`;
    my @libraries = ();

    for my $library (@all_libraries)
    {
        print "considering $library\n";
        next if grep { $_ eq $library } @libraries;

        if ($library =~ /Qt\w+/)
        {
            if ($copy_qt)
            {
                print "need Qt library $library\n";
                push @libraries, $library;
            }
        }
        elsif ($library !~ /^[\/]/)
        {
            print "need library $library\n";
            push @libraries, $library;
        }
    }

    return @libraries;
}

sub run
{
    my ($cmd) = @_;
    print "$cmd\n";
    my $retval = system($cmd);
    #ie "aborted: $!\n" if $retval != 0;
}
