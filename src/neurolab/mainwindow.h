#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "labnetwork.h"
#include "propertyobj.h"

#include <QtGui/QMainWindow>
#include <QVBoxLayout>

class QtTreePropertyBrowser;
class QtVariantEditorFactory;
class QtVariantPropertyManager;

namespace Ui
{
    class MainWindow;
}

namespace NeuroLab
{

    extern const QString VERSION;

    /// The main window class for the NeuroLab application.
    class MainWindow
        : public QMainWindow
    {
        Q_OBJECT

        static MainWindow *_instance; ///< Singleton instance of the main window.

        Ui::MainWindow *_ui; ///< The UI class generated by Qt Designer.
        QVBoxLayout *_layout; ///< The main layout for the window's content.

        LabNetwork *_currentNetwork; ///< The current network being viewed/edited.

        QtTreePropertyBrowser *_propertyEditor; ///< The property editor widget.
        QtVariantEditorFactory *_propertyFactory; ///< Property factory for the property editor.
        QtVariantPropertyManager *_propertyManager; ///< Manager for the property editor.

        PropertyObject *_propertyObject; ///< The object whose properties are currently on display.

    public:
        /// Constructor.
        /// \param parent Parent widget (should normally be 0).
        /// \param initialFname Initial filename to load.
        MainWindow(QWidget *parent = 0, const QString & initialFname = QString());
        ~MainWindow();

        /// \return A pointer to the singleton instance of the main window.
        static MainWindow *instance();

        /// \return A pointer to the main window's UI object.
        Ui::MainWindow *ui() { return _ui; }

        /// \return A pointer to the property editor widget.
        QtTreePropertyBrowser *propertyEditor() { return _propertyEditor; }

        /// \return A pointer to the object whose properties are currently being displayed.
        PropertyObject *propertyObject() { return _propertyObject; }

    protected:
        /// Handles attempts to close the window.
        virtual void closeEvent(QCloseEvent *);

    public slots:
        /// Sets the title of the window to the given string plus the current network's filename and dirty status.
        void setTitle(const QString & title = QString("NeuroLab"));

        /// Sets the object whose properties are displayed in the property widget.
        void setPropertyObject(PropertyObject *);

    private:
        void loadStateSettings();
        void saveStateSettings();
        void setupConnections();

        bool newNetwork();
        bool openNetwork();
        bool saveNetwork();
        bool closeNetwork();

        void setNetwork(LabNetwork *network);

    private slots:
        void on_action_New_triggered();
        void on_action_Open_triggered();
        void on_action_Close_triggered();
        void on_action_Save_triggered();
        void on_action_Quit_triggered();
        void on_action_Sidebar_triggered();
        void on_action_Start_triggered();
        void on_action_Stop_triggered();
        void on_action_Step_triggered();
        void on_action_Reset_triggered();
        void on_action_Delete_triggered();
    };

    /// Base class for exceptions used by the NeuroLab software.
    class LabException
        : public Automata::Exception
    {
    public:
        LabException(const QString & message) : Automata::Exception(message) {}
    };

} // namespace NeuroLab

#endif // MAINWINDOW_H
