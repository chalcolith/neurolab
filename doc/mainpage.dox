/**

\mainpage Neurocognitive Linguistics Laboratory Developers' Documentation

\section intro_sec Introduction

The Neurocognitive Linguistics Laboratory program consists of the following modules:

 - \ref Automata - A library for handling asynchronous automata over directed graphs.  The algorithm is from
   <a href="https://uhra.herts.ac.uk/dspace/bitstream/2299/1966/1/900614.pdf">Chrystopher L. Nehaniv, Asynchronous automata networks can emulate any synchronous automata network</a>.
 - \ref NeuroLib - Uses the \ref Automata module to implement Sydney Lamb's <a href="http://www.ruf.rice.edu/~lngbrain/shipman/">narrow network notation</a>, from which higher-level
   relational network structures can be built.  It is implemented as a separate library so that simulations do not need the full
   gui; simulations can run in non-interactive batch-type programs, or in a server, or otherwise.  The data from the raw neural network
   is stored in a separate file from that of the GUI display.
 - \ref NeuroGui - The main Gui.  This is implemented as a separate library so that plugins can link to it.
 - \ref NeuroLab - A small wrapper for the program.

\section gui_sec The NeuroLab Program

NeuroLab is implemented in a library (this allows plugins to be linked against the GUI code), with a tiny wrapper program.

The main parts of the library are:

 - \ref NeuroGui::LabNetwork - this stores a user's network simulation; it is the primary "file" that a user works with.
   It has several aspects:
   - \ref NeuroGui::LabTree - this is a tree of lab scenes.  The idea is that you wouldn't want your entire network in one view
     at one time.  You can create items (\ref NeuroGui::SubNetworkItem) that when double-clicked on drill down into a new scene.
     - \ref NeuroGui::LabScene - a subclass of QGraphicsScene; controls the display of part of a network.
     - \ref NeuroGui::LabView - a view into the scene; currently there is one view per scene.
     - \ref NeuroGui::NeuroItem - a subclass of QGraphicsItem, and the base class for items that are visible in your network
       (e.g. nodes and links of the relational network notation).  When you subclass a property item, you can define the item's
       appearance and collision information (using \ref NeuroGui::NeuroItem::shape()), as well as how it interacts with other items
       (using \ref NeuroGui::NeuroItem::canAttachTo(), etc.).  Item types can also add menu items to the context menu
       (using \ref NeuroGui::NeuroItem::buildNewMenu() and \ref NeuroGui::NeuroItem::buildActionMenu()).
   - \ref NeuroGui::LabDataFile - data can also be collected for a network simulation; a data file is separate from but dependent on
     the current network.
 - \ref NeuroGui::PropertyObject - subclasses of \ref NeuroGui::PropertyObject can define editable properties simply and easily by
   defining members using the \ref NeuroGui::PropertyObject::Property template.  These then can be edited in the property editing control in the sidebar.
 - Plugins: A plugin is just a DLL or shared library that contains subclasses of \ref NeuroGui::NeuroItem that use the \ref NEUROITEM_DECLARE_CREATOR
   and \ref NEUROITEM_DEFINE_CREATOR macros to hook into the item creation system.  Currently the program will look in a "plugins" directory under where
   the executable is located.

\section building_sec Building

The project is developed in the <a href="http://qt.nokia.com/downloads">Qt Creator</a> IDE.

Due to limitations in the Qt Creator build system, you will need to clone your copy of the NeuroLab repository to a directory that does
not have spaces in its path.

NOTE: If you want to use the automated build tools, set your shadow directories to be "build-debug" and "build-release" instead of the defaults
provided by Qt Creator.  You might want to do this anyway on Windows, because the default paths are likely to lead to path names that are too long
for windows to handle during the build, and you will get strange errors.

Once you have installed the Qt SDK, open the file <tt>src/neurolab_all.pro</tt> in Qt Creator.

\subsection building_linux Building on Linux

On Linux you might need to add or modify the build variable LD_LIBRARY_PATH to include "." before you will be able to run NeuroLab
from the debugger.

\subsection building_osx Building on Mac OS X

On the Mac, you will need to add an extra build step to the neurolab project that calls <tt>utils/macdeploy</tt> before you
can debug or run the program.  This will correctly rename the shared library references in the app bundle.

*/
